---
- name: check if autonomi binary exists
  ansible.builtin.stat:
    path: "{{ binary_dir }}/autonomi"
  register: autonomi_binary

- name: download the autonomi binary
  ansible.builtin.get_url:
    url: "{{ autonomi_archive_url }}"
    dest: "/tmp/{{ autonomi_archive_filename }}"
  when: not autonomi_binary.stat.exists

- name: extract the autonomi binary to /usr/local/bin
  ansible.builtin.unarchive:
    src: "/tmp/{{ autonomi_archive_filename }}"
    dest: "{{ binary_dir }}"
    remote_src: true
  become: true
  when: not autonomi_binary.stat.exists

- name: create safe users
  ansible.builtin.user:
    name: "safe{{ item }}"
    shell: /bin/bash
    state: present
  loop: "{{ range(1, autonomi_uploader_instances | int + 1) | list }}"

- name: copy upload-random-data.sh to remote for each safe user
  ansible.builtin.template:
    src: upload-random-data.sh.j2
    dest: "/home/safe{{ item }}/upload-random-data.sh"
    owner: "safe{{ item }}"
    group: "safe{{ item }}"
    mode: '0744'
  become: true
  become_user: "safe{{ item }}"
  loop: "{{ range(1, autonomi_uploader_instances | int + 1) | list }}"

- name: Check if systemd service file exists
  ansible.builtin.stat:
    path: "/etc/systemd/system/autonomi_uploader_{{ item }}.service"
  register: service_file_stat
  loop: "{{ range(1, autonomi_uploader_instances | int + 1) | list }}"

- name: Retrieve secret keys
  set_fact:
    secret_keys_per_machine: "{{ autonomi_secret_key_map[inventory_hostname] | regex_replace('\"', '') }}"

- name: create systemd service file
  ansible.builtin.template:
    src: autonomi_uploader.service.j2
    dest: "/etc/systemd/system/autonomi_uploader_{{ item.0 }}.service"
    owner: "safe{{ item.0 }}"
    group: "safe{{ item.0 }}"
    mode: '0644'
  become: true
  when: not service_file_stat.results[item.0 - 1].stat.exists
  loop: "{{ range(1, autonomi_uploader_instances | int + 1) | zip(secret_keys_per_machine) }}"
  vars: 
    count: "{{ item.0 }}"
    secret_key: "{{ item.1 }}"

- name: start and enable autonomi_uploader service for each uploader
  ansible.builtin.systemd:
    name: "autonomi_uploader_{{ item }}"
    state: started
    enabled: yes
  become: true
  loop: "{{ range(1, autonomi_uploader_instances | int + 1) | list }}"
