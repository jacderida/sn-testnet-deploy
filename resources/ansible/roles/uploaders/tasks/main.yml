---
- name: check if safe binary exists
  ansible.builtin.stat:
    path: "{{ binary_dir}}/safe"
  register: safe_binary

- name: download the safe binary
  ansible.builtin.get_url:
    url: "{{ safe_archive_url }}"
    dest: /tmp/{{ safe_archive_filename }}
  when: not safe_binary.stat.exists

- name: extract the safe binary to /usr/local/bin
  become: True
  ansible.builtin.unarchive:
    src: "/tmp/{{ safe_archive_filename }}"
    dest: "{{ binary_dir }}"
    remote_src: True
  when: not safe_binary.stat.exists

- name: copy upload-random-data.sh to remote
  ansible.builtin.copy:
    src: ../scripts/upload-random-data.sh
    dest: /home/safe/upload-random-data.sh
    owner: safe
    group: safe
    mode: '0744'
  become: yes
  become_user: safe
  when: not safe_binary.stat.exists

- name: obtain funds from the faucet
  shell: "safe --peer {{ genesis_multiaddr }} wallet get-faucet {{ faucet_address }}"
  args:
    chdir: /home/safe/
    executable: /bin/bash
  become: yes
  become_user: safe
  # run one at a time to not be rate limited by the faucet
  throttle: 1
  when: not safe_binary.stat.exists

- name: create systemd service file
  ansible.builtin.template:
    src: safe_uploader.service.j2
    dest: /etc/systemd/system/safe_uploader.service
    owner: root
    group: root
    mode: '0644'
  become: yes
  when: not safe_binary.stat.exists

- name: start and enable safe_uploader service
  ansible.builtin.systemd:
    name: safe_uploader
    state: started
    enabled: yes
  become: yes
  when: not safe_binary.stat.exists
